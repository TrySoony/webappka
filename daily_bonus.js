// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
class DailyBonusSystem {
  constructor() {
    this.bonusData = this.loadBonusData();
  }

  loadBonusData() {
    const data = localStorage.getItem('dailyBonusData');
    return data ? JSON.parse(data) : {
      lastClaimDate: null,
      consecutiveDays: 0,
      totalClaims: 0
    };
  }

  saveBonusData() {
    localStorage.setItem('dailyBonusData', JSON.stringify(this.bonusData));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
  canClaimBonus() {
    const today = new Date().toDateString();
    return this.bonusData.lastClaimDate !== today;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–µ
  getBonusInfo() {
    const today = new Date().toDateString();
    const lastClaim = this.bonusData.lastClaimDate;
    
    if (lastClaim === today) {
      return {
        canClaim: false,
        message: '–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è!',
        nextClaim: this.getNextClaimTime()
      };
    }

    const daysDiff = lastClaim ? this.getDaysDifference(lastClaim, today) : 1;
    const isConsecutive = daysDiff === 1;
    
    if (!isConsecutive && daysDiff > 1) {
      this.bonusData.consecutiveDays = 0;
    }

    const bonusAmount = this.calculateBonusAmount();
    
    return {
      canClaim: true,
      consecutiveDays: this.bonusData.consecutiveDays,
      bonusAmount: bonusAmount,
      message: this.getBonusMessage(bonusAmount, isConsecutive)
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
  claimBonus() {
    if (!this.canClaimBonus()) {
      return { success: false, message: '–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è!' };
    }

    const today = new Date().toDateString();
    const lastClaim = this.bonusData.lastClaimDate;
    const daysDiff = lastClaim ? this.getDaysDifference(lastClaim, today) : 1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.bonusData.lastClaimDate = today;
    this.bonusData.totalClaims++;
    
    if (daysDiff === 1) {
      this.bonusData.consecutiveDays++;
    } else {
      this.bonusData.consecutiveDays = 1;
    }

    const bonusAmount = this.calculateBonusAmount();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    if (window.achievementSystem) {
      window.achievementSystem.addBonusAttempts(bonusAmount);
    }

    this.saveBonusData();

    return {
      success: true,
      bonusAmount: bonusAmount,
      consecutiveDays: this.bonusData.consecutiveDays,
      message: `–ü–æ–ª—É—á–µ–Ω–æ ${bonusAmount} –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!`
    };
  }

  // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  calculateBonusAmount() {
    const baseAmount = 1;
    const consecutiveBonus = Math.floor(this.bonusData.consecutiveDays / 7) * 1; // +1 –∑–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
    const totalBonus = Math.floor(this.bonusData.totalClaims / 30) * 2; // +2 –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
    
    return baseAmount + consecutiveBonus + totalBonus;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ
  getBonusMessage(amount, isConsecutive) {
    let message = `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${amount} –ø–æ–ø—ã—Ç–æ–∫`;
    
    if (isConsecutive && this.bonusData.consecutiveDays > 1) {
      message += `\n–°–µ—Ä–∏—è: ${this.bonusData.consecutiveDays} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!`;
    }
    
    if (this.bonusData.consecutiveDays >= 7) {
      message += `\nüéâ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è! +1 –ø–æ–ø—ã—Ç–∫–∞`;
    }
    
    if (this.bonusData.totalClaims >= 30) {
      message += `\nüèÜ –ú–µ—Å—è—á–Ω–∞—è —Å–µ—Ä–∏—è! +2 –ø–æ–ø—ã—Ç–∫–∏`;
    }
    
    return message;
  }

  // –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
  getNextClaimTime() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const timeLeft = tomorrow - now;
    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}—á ${minutes}–º`;
  }

  // –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
  getDaysDifference(date1Str, date2Str) {
    const date1 = new Date(date1Str);
    const date2 = new Date(date2Str);
    const diffTime = Math.abs(date2 - date1);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      totalClaims: this.bonusData.totalClaims,
      consecutiveDays: this.bonusData.consecutiveDays,
      lastClaimDate: this.bonusData.lastClaimDate,
      canClaim: this.canClaimBonus()
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
window.dailyBonusSystem = new DailyBonusSystem(); 