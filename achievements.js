// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π
const ACHIEVEMENTS = {
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π
  FIRST_WIN: {
    id: 'first_win',
    name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑',
    icon: 'üéØ',
    condition: (stats) => stats.totalWins >= 1,
    reward: { attempts: 1 }
  },
  WINNER_5: {
    id: 'winner_5',
    name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –ø—Ä–∏–∑–æ–≤',
    icon: 'üèÜ',
    condition: (stats) => stats.totalWins >= 5,
    reward: { attempts: 2 }
  },
  WINNER_10: {
    id: 'winner_10',
    name: '–û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –ø—Ä–∏–∑–æ–≤',
    icon: 'üëë',
    condition: (stats) => stats.totalWins >= 10,
    reward: { attempts: 3 }
  },
  WINNER_25: {
    id: 'winner_25',
    name: '–ú–∞—Å—Ç–µ—Ä —Ä—É–ª–µ—Ç–∫–∏',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 25 –ø—Ä–∏–∑–æ–≤',
    icon: 'üíé',
    condition: (stats) => stats.totalWins >= 25,
    reward: { attempts: 5 }
  },
  WINNER_50: {
    id: 'winner_50',
    name: '–õ–µ–≥–µ–Ω–¥–∞',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 50 –ø—Ä–∏–∑–æ–≤',
    icon: 'üåü',
    condition: (stats) => stats.totalWins >= 50,
    reward: { attempts: 10 }
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã
  RARE_PRIZE: {
    id: 'rare_prize',
    name: '–†–µ–¥–∫–∞—è –Ω–∞—Ö–æ–¥–∫–∞',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑',
    icon: 'üí´',
    condition: (stats) => stats.rarePrizes >= 1,
    reward: { attempts: 2 }
  },
  EPIC_PRIZE: {
    id: 'epic_prize',
    name: '–≠–ø–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —ç–ø–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–∑',
    icon: 'üî•',
    condition: (stats) => stats.epicPrizes >= 1,
    reward: { attempts: 3 }
  },
  LEGENDARY_PRIZE: {
    id: 'legendary_prize',
    name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —É–¥–∞—á–∞',
    description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–∏–∑',
    icon: '‚ö°',
    condition: (stats) => stats.legendaryPrizes >= 1,
    reward: { attempts: 5 }
  },
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  DAILY_LOGIN: {
    id: 'daily_login',
    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üìÖ',
    condition: (stats) => stats.consecutiveDays >= 7,
    reward: { attempts: 1 }
  },
  WEEKLY_LOGIN: {
    id: 'weekly_login',
    name: '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üìÜ',
    condition: (stats) => stats.consecutiveDays >= 30,
    reward: { attempts: 5 }
  }
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const LEVELS = {
  1: { name: '–ù–æ–≤–∏—á–æ–∫', xpRequired: 0, bonusAttempts: 0 },
  2: { name: '–ò–≥—Ä–æ–∫', xpRequired: 100, bonusAttempts: 1 },
  3: { name: '–û–ø—ã—Ç–Ω—ã–π', xpRequired: 300, bonusAttempts: 2 },
  4: { name: '–ú–∞—Å—Ç–µ—Ä', xpRequired: 600, bonusAttempts: 3 },
  5: { name: '–≠–∫—Å–ø–µ—Ä—Ç', xpRequired: 1000, bonusAttempts: 4 },
  6: { name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', xpRequired: 1500, bonusAttempts: 5 },
  7: { name: '–í–µ—Ç–µ—Ä–∞–Ω', xpRequired: 2100, bonusAttempts: 6 },
  8: { name: '–õ–µ–≥–µ–Ω–¥–∞', xpRequired: 2800, bonusAttempts: 7 },
  9: { name: '–ú–∏—Ñ', xpRequired: 3600, bonusAttempts: 8 },
  10: { name: '–ë–æ–≥ —Ä—É–ª–µ—Ç–∫–∏', xpRequired: 4500, bonusAttempts: 10 }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
class AchievementSystem {
  constructor() {
    this.userStats = this.loadUserStats();
    this.achievements = this.loadAchievements();
  }

  loadUserStats() {
    const stats = localStorage.getItem('userStats');
    return stats ? JSON.parse(stats) : {
      totalWins: 0,
      rarePrizes: 0,
      epicPrizes: 0,
      legendaryPrizes: 0,
      consecutiveDays: 0,
      lastLoginDate: null,
      totalXP: 0,
      level: 1
    };
  }

  loadAchievements() {
    const achievements = localStorage.getItem('userAchievements');
    return achievements ? JSON.parse(achievements) : [];
  }

  saveUserStats() {
    localStorage.setItem('userStats', JSON.stringify(this.userStats));
  }

  saveAchievements() {
    localStorage.setItem('userAchievements', JSON.stringify(this.achievements));
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
  onPrizeWon(prize) {
    this.userStats.totalWins++;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–∏–∑–∞
    if (prize.starPrice >= 100000) {
      this.userStats.legendaryPrizes++;
    } else if (prize.starPrice >= 37500) {
      this.userStats.epicPrizes++;
    } else if (prize.starPrice >= 14000) {
      this.userStats.rarePrizes++;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –≤—ã–∏–≥—Ä—ã—à
    const xpGained = Math.floor(prize.starPrice / 1000);
    this.addXP(xpGained);

    this.checkAchievements();
    this.saveUserStats();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ XP
  addXP(amount) {
    this.userStats.totalXP += amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const newLevel = this.calculateLevel(this.userStats.totalXP);
    if (newLevel > this.userStats.level) {
      this.userStats.level = newLevel;
      this.showLevelUpNotification(newLevel);
    }
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ XP
  calculateLevel(xp) {
    for (let level = Object.keys(LEVELS).length; level >= 1; level--) {
      if (xp >= LEVELS[level].xpRequired) {
        return level;
      }
    }
    return 1;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkAchievements() {
    Object.values(ACHIEVEMENTS).forEach(achievement => {
      if (!this.achievements.includes(achievement.id) && 
          achievement.condition(this.userStats)) {
        this.unlockAchievement(achievement);
      }
    });
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  unlockAchievement(achievement) {
    this.achievements.push(achievement.id);
    this.saveAchievements();
    this.showAchievementNotification(achievement);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    if (achievement.reward.attempts) {
      this.addBonusAttempts(achievement.reward.attempts);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  addBonusAttempts(amount) {
    const currentBonus = parseInt(localStorage.getItem('bonusAttempts') || '0');
    localStorage.setItem('bonusAttempts', (currentBonus + amount).toString());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  getBonusAttempts() {
    return parseInt(localStorage.getItem('bonusAttempts') || '0');
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
  useBonusAttempt() {
    const currentBonus = this.getBonusAttempts();
    if (currentBonus > 0) {
      localStorage.setItem('bonusAttempts', (currentBonus - 1).toString());
      return true;
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  checkDailyLogin() {
    const today = new Date().toDateString();
    if (this.userStats.lastLoginDate !== today) {
      if (this.userStats.lastLoginDate) {
        const lastLogin = new Date(this.userStats.lastLoginDate);
        const daysDiff = Math.floor((new Date() - lastLogin) / (1000 * 60 * 60 * 24));
        
        if (daysDiff === 1) {
          this.userStats.consecutiveDays++;
        } else {
          this.userStats.consecutiveDays = 1;
        }
      } else {
        this.userStats.consecutiveDays = 1;
      }
      
      this.userStats.lastLoginDate = today;
      this.checkAchievements();
      this.saveUserStats();
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showAchievementNotification(achievement) {
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (window.audioSystem) {
      window.audioSystem.playAchievementSound();
    }
    
    const notification = document.createElement('div');
    notification.className = 'achievement-notification';
    notification.innerHTML = `
      <div class="achievement-icon">${achievement.icon}</div>
      <div class="achievement-content">
        <div class="achievement-title">${achievement.name}</div>
        <div class="achievement-description">${achievement.description}</div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 3000);
  }

  showLevelUpNotification(level) {
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    if (window.audioSystem) {
      window.audioSystem.playLevelUpSound();
    }
    
    const notification = document.createElement('div');
    notification.className = 'level-up-notification';
    notification.innerHTML = `
      <div class="level-up-icon">üéâ</div>
      <div class="level-up-content">
        <div class="level-up-title">–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!</div>
        <div class="level-up-level">${LEVELS[level].name}</div>
        <div class="level-up-bonus">+${LEVELS[level].bonusAttempts} –ø–æ–ø—ã—Ç–æ–∫</div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 4000);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getStats() {
    return {
      ...this.userStats,
      bonusAttempts: this.getBonusAttempts(),
      achievements: this.achievements.length,
      totalAchievements: Object.keys(ACHIEVEMENTS).length,
      nextLevelXP: LEVELS[Math.min(this.userStats.level + 1, Object.keys(LEVELS).length)].xpRequired,
      currentLevelInfo: LEVELS[this.userStats.level]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievementsList() {
    return Object.values(ACHIEVEMENTS).map(achievement => ({
      ...achievement,
      unlocked: this.achievements.includes(achievement.id)
    }));
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
window.achievementSystem = new AchievementSystem(); 